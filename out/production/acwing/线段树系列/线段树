线段树：解决的是区间问题
针对区间里面的性质得出该区间的结果,如常求，区间最大值、区间最小值、区间和
（这些问题，无法使用单调队列即滑动窗口解决，因为区间的大小是任意的，也即如果用滑动窗口里面的窗口大小k是无法确定的）

线段树模板注意问题
w[] 待维护数组
tree[] 大小要开到维护数组的4倍

1.pushUp()
实现的是针对区间性质或题目要求，求得该区间结果的逻辑，如常见的sum,min,max

pushUp(int cur)
tree[cur].v = sum、min、max、(tree[cur<<1].v,tree[cur<<1|1].v)

2.build(int cur,int l,int r)
if(l == r) tree[cur] = {1,r,w[l]}

Java实现
tree[cur] = new node(l,r);
if(l== r) tree[cur].v = w[l]


else{
    // 二分法
    int mid = l+r >> 1;
    build(cur<<1,l,mid); // 建立左区间
    build(cur<<1|1,mid+1,r); // 建立右区间

    pushUp(cur);
}

3.int query(int cur,int l,int r)

// 查询区间大于当前节点管理区间
if(l <= tree[cur].l && r >= tree[cur].r) return tree[cur].v;
// 否则将当前节点管理区间分半

int mid = tree[cur].l + tree[cur].r >> 1;
int sum = 0; // 或根据路径设定的变量 需要合理初始化
// mid 位于 待查询区间中
if(mid >= l) sum += query(cur<<1,l,r); // 查询左半
if(r >= mid+1) sum +=query(cur<<1|1,l,r); // 查询右半

return sum


易错：查询左半，右半时 待查询区间l,r 不变 查询节点发生变化
if(mid >= l)
if(r >= mid+1)


4.void modify(int cur,int idx,int v)

// 如果修改的位置 整好是该节点管理的区间 也即 该节点只管理一个点
// 或者理解为 找到了管理idx这个节点的节点
if(tree[cur].l == tree[cur].r) tree[cur].v  += v;
else
{
    int mid = tree[cur].l + tree[cur].r >> 1;
    // 修改的位置idx 位于 左半
    if(idx <= mid) modify(cur<<1,idx,v)
    else{
        modify(cur<<1|1,idx,v);
    }
    pushUp(cur);
}

易错：idx,v 两个参数始终不变, 改变的是管理节点 idx<= mid 就是左节点 idx > mid 就是右节点


线段树的模板用到了
递归
二分
细节比较多
