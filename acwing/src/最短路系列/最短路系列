## 最短路问题

n 为点的数量

m 为边的数量

### 单源最短路（一个点到其他点的最短距离）

- 所有边权都是正数
  - 朴素迪杰斯特拉算法 o(n^2)  稠密图 m ~ n^2
  - 堆优化版的迪杰斯特拉算法o(mlgn)  稀疏图 n m <= 10^5
- 存在负权边
  - Bellman-Ford o(nm)
  - SPFA 一般：o(m) 最坏 o(nm)



朴素版迪杰斯特拉算法

s :当前已经确定最短距离的点

1. dist[i] = 0; dist[i] = +无穷
2. for i : 0 ~ n 
   - t 不在s中的 距离最近的点
   - 用t 更新其他点的距离





Bellman-ford 算法 （存在负权边，当存在负权回路最短路不一定存在 负环位于待求路径上时，一定不存在）o(nm)

循环n次 （k次，不超过k条边的最短路，若n，最短路上有n条边，有n+1个点 存在回路）

循环所有边 (a,b,w) (==松弛操作==)


循环所有的边 一次只更新一段路径（需要用到备份数组 来保证），通过k来实现边数限制
```c++
for (int i = 0; i < k; i++) {
            System.arraycopy(d, 0, backup, 0, N);
            for (int j = 1; j < m; j++) {
                Edge t = edges[j];
                int a = t.a, b = t.b, w = t.w;
                d[b] = Math.min(d[b], backup[a] + w); // 并不一定真正得到更新
            }
}
```
并不一定更新，这一点也是 spfa 的优化所在  通过st 记录是否更新 用queue 储存所有 更新过的点
然后这样保证每次出队的点 都能对其到达点的距离进行更新




### 多源汇最短路（任意两个点之间的最短距离）

- Floyd 算法 o(n^3)

```c++
// Acwing 854 Floyd 求最短路
const int N = 210,INF = 1e9;
int d[N][N];
int n,m; // 点数 边数

void floyd()
{
    for(int k=1;k<=n;k++)
        	for(int i=1;i<=n;i++)
                for(int j=1;j<=n;j++)
                    	d[i][j] = min(d[i][j],d[i][k]+d[k][j]);
}

int main()
{
    // 初始化邻接矩阵
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            if(i==j)d[i][j] = 0;
    		else d[i][j] = INF; // 初始化为无穷大
    
    // 建图
    for(int i=1;i<=m;i++)
        int a,b,w;
        d[a][b] = min(d[a][b],w); // 取最小值 避免重边
    
    floyd();
    
    // 求具体两点间最大距离
}
```







==最短路问题 难点 ：建图！==


最后的判断
if(d[n] > INF/2)puts("impossible")
else cout<<d[n];

这样判断的原因是存在负权边，但分析数据规模知道，假设所有的边都为负权边，
与最开始初始化 d 的INF 1e9 向加 还是很大 肯定超过INF/2 也就无法到达